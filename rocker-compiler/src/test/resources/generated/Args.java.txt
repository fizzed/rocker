package rocker;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;

/*
 * Auto generated code to render template rocker/Args.rocker.html
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
public class Args extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.HTML; }
    static public String getTemplateName() { return "Args.rocker.html"; }
    static public String getTemplatePackageName() { return "rocker"; }
    static public String getHeaderHash() = { return "379218683"; }
    static public long getModifiedAt() { return 1442956658000L; }

    // argument @ [4:6]
    private String s;
    // argument @ [4:6]
    private Integer i;

    public Args s(String s) {
        this.s = s;
        return this;
    }

    public String s() {
        return this.s;
    }

    public Args i(Integer i) {
        this.i = i;
        return this;
    }

    public Integer i() {
        return this.i;
    }

    static public Args template(String s, Integer i) {
        return new Args()
            .s(s)
            .i(i);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for performance (via rocker.optimize flag; no auto reloading)
        return new Template(this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate<Template> {

        // \n
        static private final byte[] PLAIN_TEXT_0_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(Args.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
        }

        // argument @ [4:6]
        protected final String s;
        // argument @ [4:6]
        protected final Integer i;

        public Template(Args model) {
            super(model);
            __internal.setCharsetName("UTF-8");
            __internal.setContentType(CONTENT_TYPE);
            __internal.setTemplateName(TEMPLATE_NAME);
            __internal.setTemplatePackageName(TEMPLATE_PACKAGE_NAME);
            this.s = model.s();
            this.i = model.i();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [4:27]
            __internal.aboutToExecutePosInTemplate(4, 27);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ValueExpression @ [5:1]
            __internal.aboutToExecutePosInTemplate(5, 1);
            __internal.renderValue(s);
            // PlainText @ [5:3]
            __internal.aboutToExecutePosInTemplate(5, 3);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ValueExpression @ [6:1]
            __internal.aboutToExecutePosInTemplate(6, 1);
            __internal.renderValue(i);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "\n";

    }

}
